import type { ConnectionConfig } from "pg";
import type { CompositeTypeDetails } from "./kinds/extractCompositeType";
import type { DomainDetails } from "./kinds/extractDomain";
import type { EnumDetails } from "./kinds/extractEnum";
import type { ForeignTableDetails } from "./kinds/extractForeignTable";
import type { MaterializedViewDetails } from "./kinds/extractMaterializedView";
import type { RangeDetails } from "./kinds/extractRange";
import type { TableDetails } from "./kinds/extractTable";
import type { ViewDetails } from "./kinds/extractView";
import type PgType from "./kinds/PgType";
/**
 * extractSchemas generates a record of all the schemas extracted, indexed by schema name.
 * The schemas are instances of this type.
 */
export type Schema = {
    name: string;
    domains: DomainDetails[];
    enums: EnumDetails[];
    ranges: RangeDetails[];
    tables: TableDetails[];
    foreignTables: ForeignTableDetails[];
    views: ViewDetails[];
    materializedViews: MaterializedViewDetails[];
    compositeTypes: CompositeTypeDetails[];
};
/**
 * This is the options object that can be passed to `extractSchemas`.
 * @see extractSchemas
 */
export interface ExtractSchemaOptions {
    /**
     * Will contain an array of schema names to extract.
     * If undefined, all non-system schemas will be extracted.
     */
    schemas?: string[];
    /**
     * Filter function that you can use if you want to exclude
     * certain items from the schemas.
     */
    typeFilter?: (pgType: PgType) => boolean;
    /**
     * extractShemas will always attempt to parse view definitions to
     * discover the "source" of each column, i.e. the table or view that it
     * is derived from.
     * If this option is set to `true`, it will attempt to follow this
     * source and copy values like indices, isNullable, etc.
     * so that the view data is closer to what the database reflects.
     */
    resolveViews?: boolean;
    /**
     * Called with the number of types to extract.
     */
    onProgressStart?: (total: number) => void;
    /**
     * Called once for each type that is extracted.
     */
    onProgress?: () => void;
    /**
     * Called when all types have been extracted.
     */
    onProgressEnd?: () => void;
}
/**
 * Perform the extraction
 * @param connectionConfig - Connection string or configuration object for Postgres connection
 * @param options - Optional options
 * @returns A record of all the schemas extracted, indexed by schema name.
 */
declare function extractSchemas(connectionConfig: string | ConnectionConfig, options?: ExtractSchemaOptions): Promise<Record<string, Schema>>;
export default extractSchemas;
