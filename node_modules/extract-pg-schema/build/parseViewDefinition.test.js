"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var parseViewDefinition_1 = __importDefault(require("./parseViewDefinition"));
var fixture_1 = require("./tests/fixture");
(0, fixture_1.describe)('parseViewDefinition', function () {
    (0, fixture_1.it)('should understand a trivial select', function () {
        var query = "SELECT id FROM service";
        var def = (0, parseViewDefinition_1.default)(query);
        (0, fixture_1.expect)(def).toEqual([
            { name: 'id', schema: undefined, table: 'service', column: 'id' },
        ]);
    });
    (0, fixture_1.it)('should understand a select with explicit schema', function () {
        var query = "SELECT id FROM public.service";
        var def = (0, parseViewDefinition_1.default)(query);
        (0, fixture_1.expect)(def).toEqual([
            { name: 'id', schema: 'public', table: 'service', column: 'id' },
        ]);
    });
    (0, fixture_1.it)('should understand a select with join', function () {
        var query = "SELECT service.id,\n    service.\"createdAt\",\n    service.name,\n    \"oauthConnection\".\"createdBy\" AS owner\n   FROM service\n     LEFT JOIN \"oauthConnection\" ON service.\"oauthConnectionId\" = \"oauthConnection\".id;";
        var def = (0, parseViewDefinition_1.default)(query);
        (0, fixture_1.expect)(def).toEqual([
            { name: 'id', schema: undefined, table: 'service', column: 'id' },
            {
                name: 'createdAt',
                schema: undefined,
                table: 'service',
                column: 'createdAt',
            },
            { name: 'name', schema: undefined, table: 'service', column: 'name' },
            {
                name: 'owner',
                schema: undefined,
                table: 'oauthConnection',
                column: 'createdBy',
            },
        ]);
    });
    (0, fixture_1.it)('should work with multiple schemas and with aliases', function () {
        var query = "\n    select u.id as uid, um.id as umid \n      from test1.users u \n      join test2.user_managers um \n      on um.user_id = u.id;";
        var def = (0, parseViewDefinition_1.default)(query);
        (0, fixture_1.expect)(def).toEqual([
            { name: 'uid', schema: 'test1', table: 'users', column: 'id' },
            { name: 'umid', schema: 'test2', table: 'user_managers', column: 'id' },
        ]);
    });
});
