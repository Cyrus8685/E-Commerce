"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var cli_1 = require("./cli");
(0, vitest_1.describe)("parseArgs", function () {
    vitest_1.test.each([
        {
            description: "help",
            args: ["--help"],
            expected: { help: true },
        },
        {
            description: "no args does not imply help",
            args: [],
            expected: {
                help: false,
                connectionConfig: {},
                includePatterns: [],
                excludePatterns: [],
            },
        },
        {
            description: "connection config",
            args: ["-h", "localhost", "-p", "5432", "-U", "user", "-d", "db"],
            expected: {
                help: false,
                connectionConfig: {
                    host: "localhost",
                    port: 5432,
                    user: "user",
                    database: "db",
                },
                includePatterns: [],
                excludePatterns: [],
            },
        },
        {
            description: "connection config with positional dbname",
            args: ["-h", "localhost", "-p", "5432", "-U", "user", "db"],
            expected: {
                help: false,
                connectionConfig: {
                    host: "localhost",
                    port: 5432,
                    user: "user",
                    database: "db",
                },
                includePatterns: [],
                excludePatterns: [],
            },
        },
        {
            description: "multiple include schemas",
            args: ["-n", "schema1", "-n", "schema2"],
            expected: {
                help: false,
                connectionConfig: {},
                includePatterns: ["schema1", "schema2"],
                excludePatterns: [],
            },
        },
        {
            description: "multiple exclude schemas",
            args: ["-n", "schema1", "-N", "schema2", "-N", "schema3"],
            expected: {
                help: false,
                connectionConfig: {},
                includePatterns: ["schema1"],
                excludePatterns: ["schema2", "schema3"],
            },
        },
    ])("it should parse args: $description", function (_a) {
        var args = _a.args, expected = _a.expected;
        var result = (0, cli_1.parseArgs)(args);
        (0, vitest_1.expect)(result).toEqual(expected);
    });
});
(0, vitest_1.describe)("createSchemaFilter", function () {
    vitest_1.test.each([
        {
            description: "no include or exclude",
            include: [],
            exclude: [],
            expected: ["test", "test2", "other"],
        },
        {
            description: "include exact match",
            include: ["test"],
            exclude: [],
            expected: ["test"],
        },
        {
            description: "include pattern",
            include: ["test.*"],
            exclude: [],
            expected: ["test", "test2"],
        },
        {
            description: "exclude exact match",
            include: [],
            exclude: ["test"],
            expected: ["test2", "other"],
        },
        {
            description: "exclude pattern",
            include: [],
            exclude: ["test.*"],
            expected: ["other"],
        },
        {
            description: "include and exclude",
            include: ["test.*"],
            exclude: [".*2"],
            expected: ["test"],
        },
    ])("it should filter schemas: $description", function (_a) {
        var include = _a.include, exclude = _a.exclude, expected = _a.expected;
        var schemaFilter = (0, cli_1.createSchemaFilter)(include, exclude);
        var input = ["test", "test2", "other"];
        var result = input.filter(function (element) { return schemaFilter(element); });
        (0, vitest_1.expect)(result).toEqual(expected);
    });
});
