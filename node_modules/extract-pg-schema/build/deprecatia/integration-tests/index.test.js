"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var knex_1 = __importDefault(require("knex"));
var testcontainers_1 = require("testcontainers");
var vitest_1 = require("vitest");
var extract_schema_1 = __importDefault(require("../extract-schema"));
var timeout = 5 * 60 * 1000;
var containerLogPrefix = "postgres-container>>> ";
(0, vitest_1.describe)("extractSchema", function () {
    /** @type {import('testcontainers').StartedTestContainer} */
    var startedContainer;
    var connection;
    var config;
    (0, vitest_1.beforeAll)(function () { return __awaiter(void 0, void 0, void 0, function () {
        var genericContainer, stream, setupDB;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (process.arch === "arm64") {
                        // The Ruyk thing doesn't work on arm64 at the time of writing.
                        // Disable and prune docker images manually
                        // eslint-disable-next-line no-process-env
                        process.env["TESTCONTAINERS_RYUK_DISABLED"] = true;
                    }
                    genericContainer = new testcontainers_1.GenericContainer("kristiandupont/dvdrental-image")
                        .withExposedPorts(5432)
                        .withEnvironment({ POSTGRES_PASSWORD: "postgres" })
                        .withStartupTimeout(timeout);
                    return [4 /*yield*/, genericContainer.start()];
                case 1:
                    // .withWaitStrategy(
                    //   Wait.forLogMessage('database system is ready to accept connections')
                    // );
                    startedContainer = _a.sent();
                    return [4 /*yield*/, startedContainer.logs()];
                case 2:
                    stream = _a.sent();
                    stream
                        // .on('data', (line) => console.log(containerLogPrefix + line))
                        .on("err", function (line) { return console.error(containerLogPrefix + line); })
                        // eslint-disable-next-line no-console
                        .on("end", function () { return console.log(containerLogPrefix + "Stream closed"); });
                    connection = {
                        host: startedContainer.getHost(),
                        database: "dvdrental",
                        port: startedContainer.getMappedPort(5432),
                        password: "postgres",
                        user: "postgres",
                    };
                    config = {
                        client: "postgres",
                        connection: connection,
                    };
                    setupDB = (0, knex_1.default)(config);
                    return [4 /*yield*/, setupDB.schema.createSchemaIfNotExists("some_schema")];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, setupDB.schema
                            .withSchema("some_schema")
                            .createTable("default_table", function (table) {
                            table.increments();
                            table.enu("cust_type", ["value1", "value2"], {
                                useNative: true,
                                enumName: "cust_type",
                            });
                            table.string("name");
                            table.boolean("flag");
                            table.timestamps();
                            table.jsonb("json_field");
                            table.uuid("uuid_col");
                        })];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, setupDB.schema.raw("CREATE VIEW some_schema.default_view AS select * from some_schema.default_table")];
                case 5:
                    _a.sent();
                    // await setupDB.schema.raw(
                    //   'CREATE MATERIALIZED VIEW some_schema.default_matview AS select * from some_schema.default_table'
                    // );
                    return [4 /*yield*/, setupDB.schema.createSchemaIfNotExists("not_default")];
                case 6:
                    // await setupDB.schema.raw(
                    //   'CREATE MATERIALIZED VIEW some_schema.default_matview AS select * from some_schema.default_table'
                    // );
                    _a.sent();
                    return [4 /*yield*/, setupDB.schema.raw("CREATE TYPE not_default.cust_type_not_default as ENUM ('custom1', 'custom2');")];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, setupDB.schema
                            .withSchema("not_default")
                            .createTable("not_default_table", function (table) {
                            table.increments();
                            table.enu("cust_type_not_default", ["custom1", "custom2"], {
                                useNative: true,
                                existingType: true,
                                enumName: "cust_type_not_default",
                                schemaName: "not_default",
                            });
                            table.string("name_2");
                            table.boolean("flag_2");
                            table.timestamps();
                            table.jsonb("json_2");
                            table.uuid("uuid_2");
                        })];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, setupDB.schema.raw("CREATE VIEW not_default.not_default_view AS select * from not_default.not_default_table")];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, setupDB.destroy()];
                case 10:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); }, timeout);
    (0, vitest_1.afterAll)(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, startedContainer.stop({
                        timeout: 10000,
                    })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); }, timeout);
    (0, vitest_1.test)("in first schema", function () { return __awaiter(void 0, void 0, void 0, function () {
        var extracted, extractedViewNames;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, extract_schema_1.default)("some_schema", connection, false)];
                case 1:
                    extracted = _a.sent();
                    (0, vitest_1.expect)(extracted.tables).toHaveLength(1);
                    (0, vitest_1.expect)(extracted.tables[0].name).toBe("default_table");
                    (0, vitest_1.expect)(extracted.views).toHaveLength(1);
                    extractedViewNames = extracted.views.map(function (view) { return view.name; });
                    (0, vitest_1.expect)(extractedViewNames).toContain("default_view");
                    // This currently doesn't work. Uncomment when fixing materialized views.
                    // expect(extractedViewNames).toContain('default_matview');
                    // // The materialized view should be equal to the regular view in everything but name
                    // expect(extracted.views[0]).toEqual({
                    //   ...extracted.views[1],
                    //   name: 'default_matview',
                    // });
                    (0, vitest_1.expect)(extracted.types).toHaveLength(1);
                    (0, vitest_1.expect)(extracted.types.filter(function (t) { return t.name === "cust_type"; })).toHaveLength(1);
                    (0, vitest_1.expect)(extracted.types.filter(function (t) { return t.name === "cust_type_not_default"; })).toHaveLength(0);
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.test)("in secondary schema", function () { return __awaiter(void 0, void 0, void 0, function () {
        var extracted;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, extract_schema_1.default)("not_default", connection, false)];
                case 1:
                    extracted = _a.sent();
                    (0, vitest_1.expect)(extracted.tables).toHaveLength(1);
                    (0, vitest_1.expect)(extracted.tables[0].name).toBe("not_default_table");
                    (0, vitest_1.expect)(extracted.views).toHaveLength(1);
                    (0, vitest_1.expect)(extracted.views[0].name).toBe("not_default_view");
                    (0, vitest_1.expect)(extracted.types).toHaveLength(1);
                    (0, vitest_1.expect)(extracted.types.filter(function (t) { return t.name === "cust_type"; })).toHaveLength(0);
                    (0, vitest_1.expect)(extracted.types.filter(function (t) { return t.name === "cust_type_not_default"; })).toHaveLength(1);
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.test)("references should contain schema, table and column", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, extracted;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = (0, knex_1.default)(config);
                    return [4 /*yield*/, db.raw("CREATE SCHEMA test1;\nCREATE SCHEMA test2;\n\nCREATE TABLE test1.users (\n    id integer PRIMARY KEY\n);\n\nCREATE TABLE test2.user_managers (\n    id integer PRIMARY KEY,\n    user_id integer REFERENCES test1.users(id)\n);\n")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, db.destroy()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, (0, extract_schema_1.default)("test2", connection, false)];
                case 3:
                    extracted = _a.sent();
                    (0, vitest_1.expect)(extracted.tables[0].columns[1].reference).toEqual({
                        schema: "test1",
                        table: "users",
                        column: "id",
                        onDelete: "NO ACTION",
                        onUpdate: "NO ACTION",
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.describe)("view column resolution", function () {
        (0, vitest_1.it)("should resolve foreign keys and other properties in simple views", function () { return __awaiter(void 0, void 0, void 0, function () {
            var db, extracted, v, id, ref;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        db = (0, knex_1.default)(config);
                        return [4 /*yield*/, db.raw("\nDROP SCHEMA some_schema CASCADE;\nCREATE SCHEMA some_schema;\nCREATE TABLE some_schema.secondary (\n    id integer PRIMARY KEY\n);\n\nCREATE TABLE some_schema.source (\n    id integer PRIMARY KEY,\n    name text,\n    secondary_ref integer REFERENCES some_schema.secondary(id) NOT NULL\n);\n\nCREATE VIEW some_schema.v AS SELECT * FROM some_schema.source;\n")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, db.destroy()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, (0, extract_schema_1.default)("some_schema", connection, true)];
                    case 3:
                        extracted = _a.sent();
                        v = extracted.views.find(function (view) { return view.name === "v"; });
                        id = v.columns.find(function (column) { return column.name === "id"; });
                        (0, vitest_1.expect)(id.isPrimary).toBe(true);
                        (0, vitest_1.expect)(id.nullable).toBe(false);
                        ref = v.columns.find(function (column) { return column.name === "secondary_ref"; });
                        (0, vitest_1.expect)(ref.nullable).toBe(false);
                        (0, vitest_1.expect)(ref.reference).toMatchObject({
                            column: "id",
                            onDelete: "NO ACTION",
                            onUpdate: "NO ACTION",
                            schema: "some_schema",
                            table: "secondary",
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    (0, vitest_1.describe)("dvd-rental database", function () {
        (0, vitest_1.it)("Should match snapshot", function () { return __awaiter(void 0, void 0, void 0, function () {
            var extracted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, extract_schema_1.default)("public", connection, true)];
                    case 1:
                        extracted = _a.sent();
                        (0, vitest_1.expect)(extracted).toMatchSnapshot();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    (0, vitest_1.describe)("Partitions", function () {
        (0, vitest_1.it)("Should create only one object per table even if there are partitions", function () { return __awaiter(void 0, void 0, void 0, function () {
            var db, extracted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        db = (0, knex_1.default)(config);
                        return [4 /*yield*/, db.raw("CREATE SCHEMA partition_test\n   CREATE TABLE test (\n     id SERIAL,\n     type TEXT NOT NULL,\n     PRIMARY KEY(id, type)\n   ) PARTITION BY LIST(type)\n\n   CREATE TABLE test_a PARTITION OF test FOR VALUES IN ('a')\n ;")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, db.destroy()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, (0, extract_schema_1.default)("partition_test", connection, false)];
                    case 3:
                        extracted = _a.sent();
                        (0, vitest_1.expect)(extracted.tables).toHaveLength(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    // Confirms the use of distinct in extractTables()
    (0, vitest_1.describe)("Triggers", function () {
        (0, vitest_1.it)("Should create only one object per table even if there are triggers", function () { return __awaiter(void 0, void 0, void 0, function () {
            var db, extracted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        db = (0, knex_1.default)(config);
                        return [4 /*yield*/, db.raw("CREATE SCHEMA trigger_test\n   CREATE TABLE test (id int);\n\n   CREATE FUNCTION test_function() RETURNS TRIGGER LANGUAGE plpgsql\n     AS $$ begin\n      return null;\n     end; $$;\n\n   CREATE TRIGGER test_trigger AFTER INSERT OR UPDATE\n     ON trigger_test.test\n     FOR EACH ROW execute function test_function()\n ;")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, db.destroy()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, (0, extract_schema_1.default)("trigger_test", connection, false)];
                    case 3:
                        extracted = _a.sent();
                        (0, vitest_1.expect)(extracted.tables).toHaveLength(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    (0, vitest_1.describe)("selected tables", function () {
        (0, vitest_1.beforeAll)(function () { return __awaiter(void 0, void 0, void 0, function () {
            var db;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        db = (0, knex_1.default)(config);
                        return [4 /*yield*/, db.raw("CREATE SCHEMA test3;\n\nCREATE TABLE test3.users (\n    id integer PRIMARY KEY\n);\n\nCREATE TABLE test3.credentials (\n    id integer PRIMARY KEY,\n    user_id integer REFERENCES test3.users(id),\n    password text\n);\n")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, db.destroy()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        (0, vitest_1.it)("by default get all tables", function () { return __awaiter(void 0, void 0, void 0, function () {
            var all, tableNames;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, extract_schema_1.default)("test3", connection, false)];
                    case 1:
                        all = _a.sent();
                        (0, vitest_1.expect)(all.tables).toHaveLength(2);
                        tableNames = all.tables.map(function (t) { return t.name; });
                        (0, vitest_1.expect)(tableNames).toContain("users");
                        (0, vitest_1.expect)(tableNames).toContain("credentials");
                        return [2 /*return*/];
                }
            });
        }); });
        (0, vitest_1.it)("should get only selected tables", function () { return __awaiter(void 0, void 0, void 0, function () {
            var selected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, extract_schema_1.default)("test3", connection, false, [
                            "users",
                        ])];
                    case 1:
                        selected = _a.sent();
                        (0, vitest_1.expect)(selected.tables).toHaveLength(1);
                        (0, vitest_1.expect)(selected.tables[0].name).toBe("users");
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
