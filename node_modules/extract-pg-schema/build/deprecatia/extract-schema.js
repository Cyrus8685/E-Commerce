"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var R = __importStar(require("ramda"));
var tagged_comment_parser_1 = require("tagged-comment-parser");
var extractSchemas_1 = __importDefault(require("../extractSchemas"));
var tryParse = function (str) {
    try {
        return (0, tagged_comment_parser_1.parse)(str);
    }
    catch (e) {
        return { comment: str || undefined, tags: {} };
    }
};
var mapColumn = function (column) {
    var 
    // These have just been renamed:
    nullable = column.isNullable, rawInfo = column.informationSchemaValue, isPrimary = column.isPrimaryKey, 
    // These have changed:
    reference = column.reference, expandedType = column.expandedType, rawComment = column.comment, 
    // And these didn't exist before:
    _ordinalPosition = column.ordinalPosition, _type = column.type, _dimensions = column.dimensions, 
    // Everything else should be as it was
    rest = __rest(column, ["isNullable", "informationSchemaValue", "isPrimaryKey", "reference", "expandedType", "comment", "ordinalPosition", "type", "dimensions"]);
    var _a = tryParse(rawComment), comment = _a.comment, tags = _a.tags;
    var typeName = expandedType.split(".")[1];
    return __assign(__assign({}, rest), { comment: comment, tags: tags, nullable: nullable, rawInfo: rawInfo, isPrimary: isPrimary, type: typeName, subType: typeName, reference: (reference && {
            schema: reference.schemaName,
            table: reference.tableName,
            column: reference.columnName,
            onUpdate: reference.onUpdate,
            onDelete: reference.onDelete,
        }) ||
            undefined });
};
var mapTable = function (table) {
    var columns = table.columns, rawComment = table.comment, _informationSchemaValue = table.informationSchemaValue, _definition = table.definition, _kind = table.kind, _schemaName = table.schemaName, rest = __rest(table, ["columns", "comment", "informationSchemaValue", "definition", "kind", "schemaName"]);
    var _a = tryParse(rawComment), comment = _a.comment, tags = _a.tags;
    return __assign(__assign({}, rest), { comment: comment, tags: tags, columns: columns.map(mapColumn) });
};
var mapType = function (type) {
    var rawComment = type.comment, kind = type.kind, _schemaName = type.schemaName, rest = __rest(type, ["comment", "kind", "schemaName"]);
    var _a = tryParse(rawComment), comment = _a.comment, tags = _a.tags;
    return __assign(__assign({}, rest), { type: kind, // this just happens to match the old types..
        comment: comment, tags: tags });
};
/** @deprecated - use extractSchemas instead */
var extractSchema = function (schemaName, connectionConfig, resolveViews, tables) { return __awaiter(void 0, void 0, void 0, function () {
    var r, result;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                console.warn("NOTE: extractSchema is deprecated, use extractSchemas instead");
                return [4 /*yield*/, (0, extractSchemas_1.default)(connectionConfig, {
                        schemas: [schemaName],
                        resolveViews: resolveViews,
                        typeFilter: function (pgType) {
                            if (!["table", "view", "enum", "compositeType"].includes(pgType.kind))
                                return false;
                            if (tables && pgType.kind === "table") {
                                return tables.includes(pgType.name);
                            }
                            return true;
                        },
                    })];
            case 1:
                r = _c.sent();
                result = {
                    tables: R.sortBy(R.prop("name"), r[schemaName].tables.map(mapTable)),
                    views: R.sortBy(R.prop("name"), r[schemaName].views.map(mapTable)),
                    types: R.sortBy(R.prop("name"), __spreadArray(__spreadArray([], ((_a = r[schemaName].enums) !== null && _a !== void 0 ? _a : []), true), ((_b = r[schemaName].compositeTypes) !== null && _b !== void 0 ? _b : []), true).map(mapType)),
                };
                return [2 /*return*/, result];
        }
    });
}); };
exports.default = extractSchema;
