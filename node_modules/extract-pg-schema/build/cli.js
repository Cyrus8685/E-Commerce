#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSchemaFilter = exports.parseArgs = void 0;
var node_readline_1 = require("node:readline");
var node_util_1 = __importDefault(require("node:util"));
var extractSchemas_1 = __importDefault(require("./extractSchemas"));
if (node_util_1.default.parseArgs === undefined) {
    console.error("Unsupported Node.js version. Please use Node.js >= v18.3.0 or >= v16.17.0.");
    process.exit(1);
}
function main(args) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var parsedArgs, connectionConfig, includePatterns, excludePatterns, password, _b, schemaFilter, allSchemas, schemas;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    parsedArgs = parseArgs(args);
                    if (parsedArgs.help) {
                        showHelp();
                        return [2 /*return*/];
                    }
                    connectionConfig = parsedArgs.connectionConfig, includePatterns = parsedArgs.includePatterns, excludePatterns = parsedArgs.excludePatterns;
                    if (!((_a = process.env.PGPASSWORD) !== null && _a !== void 0)) return [3 /*break*/, 1];
                    _b = _a;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, promptPassword()];
                case 2:
                    _b = (_c.sent());
                    _c.label = 3;
                case 3:
                    password = _b;
                    schemaFilter = createSchemaFilter(includePatterns, excludePatterns);
                    return [4 /*yield*/, (0, extractSchemas_1.default)(__assign(__assign({}, connectionConfig), { password: password }))];
                case 4:
                    allSchemas = _c.sent();
                    schemas = Object.fromEntries(Object.entries(allSchemas).filter(function (_a) {
                        var schemaName = _a[0];
                        return schemaFilter(schemaName);
                    }));
                    // eslint-disable-next-line no-console
                    console.log(JSON.stringify(schemas, null, 2));
                    return [2 /*return*/];
            }
        });
    });
}
function parseArgs(args) {
    var _a, _b, _c;
    var _d = node_util_1.default.parseArgs({
        args: args,
        options: {
            help: { type: "boolean" },
            host: { type: "string", short: "h" },
            port: { type: "string", short: "p" },
            username: { type: "string", short: "U" },
            dbname: { type: "string", short: "d" },
            schema: { type: "string", short: "n", multiple: true },
            "exclude-schema": { type: "string", short: "N", multiple: true },
        },
        allowPositionals: true,
    }), values = _d.values, positionals = _d.positionals;
    if (values.help) {
        return { help: true };
    }
    return {
        help: false,
        connectionConfig: {
            host: values.host,
            port: values.port === undefined ? undefined : Number(values.port),
            user: values.username,
            database: (_a = values.dbname) !== null && _a !== void 0 ? _a : positionals[0],
        },
        includePatterns: (_b = values.schema) !== null && _b !== void 0 ? _b : [],
        excludePatterns: (_c = values["exclude-schema"]) !== null && _c !== void 0 ? _c : [],
    };
}
exports.parseArgs = parseArgs;
function showHelp() {
    console.error("Usage: ".concat(process.argv[1], " [options] [DBNAME]\n\nExtract all schemas from a PostgreSQL database and print them as JSON.\n\nOptions:\n    --help                      show this help\n    -h, --host=HOSTNAME         database server host or socket directory\n    -p, --port=PORT             database server port\n    -U, --username=USERNAME     database user name\n    -d, --dbname=DBNAME         database name to connect to\n    -n, --schema=SCHEMA         include schema regular expression (may be given multiple times)\n    -N, --exclude-schema=SCHEMA exclude schema regular expression (may be given multiple times)\n"));
}
function promptPassword() {
    return new Promise(function (resolve) {
        var rl = (0, node_readline_1.createInterface)({
            input: process.stdin,
            output: undefined, // Don't echo the password
            terminal: true,
        });
        process.stderr.write("Password: ");
        rl.question("", function (password) {
            rl.close();
            process.stderr.write("\n");
            resolve(password);
        });
    });
}
function createSchemaFilter(includePatterns, excludePatterns) {
    var includeRegexes = includePatterns.map(function (pattern) { return new RegExp(pattern); });
    var excludeRegexes = excludePatterns.map(function (pattern) { return new RegExp(pattern); });
    function isIncluded(schemaName) {
        if (includePatterns.length === 0) {
            return true; // Empty include list means include everything
        }
        return includeRegexes.some(function (pattern) { return exactMatch(pattern, schemaName); });
    }
    function isExcluded(schemaName) {
        if (excludePatterns.length === 0) {
            return false; // Empty exclude list means exclude nothing
        }
        return excludeRegexes.some(function (pattern) { return exactMatch(pattern, schemaName); });
    }
    return function (schemaName) { return isIncluded(schemaName) && !isExcluded(schemaName); };
}
exports.createSchemaFilter = createSchemaFilter;
function exactMatch(pattern, schemaName) {
    var m = pattern.exec(schemaName);
    return m !== null && m[0] === schemaName;
}
main(process.argv.slice(2)).catch(function (error) {
    var _a;
    console.error("Error: ".concat((_a = error.message) !== null && _a !== void 0 ? _a : error));
    process.exit(1);
});
