"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var knex_1 = __importDefault(require("knex"));
var R = __importStar(require("ramda"));
var extractCompositeType_1 = __importDefault(require("./kinds/extractCompositeType"));
var extractDomain_1 = __importDefault(require("./kinds/extractDomain"));
var extractEnum_1 = __importDefault(require("./kinds/extractEnum"));
var extractForeignTable_1 = __importDefault(require("./kinds/extractForeignTable"));
var extractMaterializedView_1 = __importDefault(require("./kinds/extractMaterializedView"));
var extractRange_1 = __importDefault(require("./kinds/extractRange"));
var extractTable_1 = __importDefault(require("./kinds/extractTable"));
var extractView_1 = __importDefault(require("./kinds/extractView"));
var fetchTypes_1 = __importDefault(require("./kinds/fetchTypes"));
var resolveViewColumns_1 = __importDefault(require("./resolveViewColumns"));
var emptySchema = {
    domains: [],
    enums: [],
    ranges: [],
    tables: [],
    foreignTables: [],
    views: [],
    materializedViews: [],
    compositeTypes: [],
};
var populatorMap = {
    domain: extractDomain_1.default,
    enum: extractEnum_1.default,
    range: extractRange_1.default,
    table: extractTable_1.default,
    foreignTable: extractForeignTable_1.default,
    view: extractView_1.default,
    materializedView: extractMaterializedView_1.default,
    compositeType: extractCompositeType_1.default,
};
/**
 * Perform the extraction
 * @param connectionConfig - Connection string or configuration object for Postgres connection
 * @param options - Optional options
 * @returns A record of all the schemas extracted, indexed by schema name.
 */
function extractSchemas(connectionConfig, options) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function () {
        var connection, db, q, allSchemaNames, schemaNames, missingSchemas, pgTypes, typesToExtract, populated, schemas, _i, populated_1, p, result;
        var _this = this;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    connection = connectionConfig;
                    db = (0, knex_1.default)({ client: "postgres", connection: connection });
                    return [4 /*yield*/, db
                            .select("nspname")
                            .from("pg_catalog.pg_namespace")
                            .whereNot("nspname", "=", "information_schema")
                            .whereNot("nspname", "LIKE", "pg_%")];
                case 1:
                    q = _d.sent();
                    allSchemaNames = R.pluck("nspname", q);
                    schemaNames = (_a = options === null || options === void 0 ? void 0 : options.schemas) !== null && _a !== void 0 ? _a : allSchemaNames;
                    if (options === null || options === void 0 ? void 0 : options.schemas) {
                        missingSchemas = schemaNames.filter(function (schemaName) { return !allSchemaNames.includes(schemaName); });
                        if (missingSchemas.length > 0) {
                            throw new Error("No schemas found for ".concat(missingSchemas.join(", ")));
                        }
                    }
                    return [4 /*yield*/, (0, fetchTypes_1.default)(db, schemaNames)];
                case 2:
                    pgTypes = _d.sent();
                    typesToExtract = (options === null || options === void 0 ? void 0 : options.typeFilter)
                        ? pgTypes.filter(function (element) { return options.typeFilter(element); })
                        : pgTypes;
                    (_b = options === null || options === void 0 ? void 0 : options.onProgressStart) === null || _b === void 0 ? void 0 : _b.call(options, typesToExtract.length);
                    return [4 /*yield*/, Promise.all(typesToExtract.map(function (pgType) { return __awaiter(_this, void 0, void 0, function () {
                            var result;
                            var _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, populatorMap[pgType.kind](db, pgType)];
                                    case 1:
                                        result = _b.sent();
                                        (_a = options === null || options === void 0 ? void 0 : options.onProgress) === null || _a === void 0 ? void 0 : _a.call(options);
                                        return [2 /*return*/, result];
                                }
                            });
                        }); }))];
                case 3:
                    populated = _d.sent();
                    schemas = {};
                    for (_i = 0, populated_1 = populated; _i < populated_1.length; _i++) {
                        p = populated_1[_i];
                        if (!(p.schemaName in schemas)) {
                            schemas[p.schemaName] = __assign({ name: p.schemaName }, emptySchema);
                        }
                        schemas[p.schemaName]["".concat(p.kind, "s")] = __spreadArray(__spreadArray([], schemas[p.schemaName]["".concat(p.kind, "s")], true), [
                            p,
                        ], false);
                    }
                    result = (options === null || options === void 0 ? void 0 : options.resolveViews) ? (0, resolveViewColumns_1.default)(schemas) : schemas;
                    (_c = options === null || options === void 0 ? void 0 : options.onProgressEnd) === null || _c === void 0 ? void 0 : _c.call(options);
                    return [4 /*yield*/, db.destroy()];
                case 4:
                    _d.sent();
                    return [2 /*return*/, result];
            }
        });
    });
}
exports.default = extractSchemas;
