"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var R = __importStar(require("ramda"));
var vitest_1 = require("vitest");
var useSchema_1 = __importDefault(require("../tests/useSchema"));
var useTestKnex_1 = __importDefault(require("../tests/useTestKnex"));
var extractMaterializedView_1 = __importDefault(require("./extractMaterializedView"));
var makePgType = function (name, schemaName) {
    if (schemaName === void 0) { schemaName = "test"; }
    return ({
        schemaName: schemaName,
        name: name,
        kind: "materializedView",
        comment: null,
    });
};
(0, vitest_1.describe)("extractMaterializedView", function () {
    var _a = (0, useTestKnex_1.default)(), getKnex = _a[0], databaseName = _a[1];
    (0, useSchema_1.default)(getKnex, "test");
    (0, vitest_1.it)("should extract simplified information", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, result, expected;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create materialized view test.some_materialized_view as select 1 as id")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, (0, extractMaterializedView_1.default)(db, makePgType("some_materialized_view"))];
                case 2:
                    result = _a.sent();
                    expected = {
                        name: "some_materialized_view",
                        schemaName: "test",
                        kind: "materializedView",
                        comment: null,
                        definition: " SELECT 1 AS id;",
                        columns: [
                            {
                                name: "id",
                                expandedType: "pg_catalog.int4",
                                isArray: false,
                                type: {
                                    fullName: "pg_catalog.int4",
                                    kind: "base",
                                },
                                comment: null,
                                maxLength: null,
                                defaultValue: null,
                                isNullable: true,
                                isIdentity: false,
                                isUpdatable: false,
                                ordinalPosition: 1,
                                generated: "NEVER",
                                fakeInformationSchemaValue: {
                                    table_catalog: databaseName,
                                    table_schema: "test",
                                    table_name: "some_materialized_view",
                                    column_name: "id",
                                    ordinal_position: 1,
                                    column_default: null,
                                    is_nullable: "YES",
                                    data_type: "integer",
                                    character_maximum_length: null,
                                    character_octet_length: null,
                                    numeric_precision: 32,
                                    numeric_precision_radix: 2,
                                    numeric_scale: 0,
                                    datetime_precision: null,
                                    interval_type: null,
                                    interval_precision: null,
                                    character_set_catalog: null,
                                    character_set_schema: null,
                                    character_set_name: null,
                                    collation_catalog: null,
                                    collation_schema: null,
                                    collation_name: null,
                                    domain_catalog: null,
                                    domain_schema: null,
                                    domain_name: null,
                                    udt_catalog: databaseName,
                                    udt_schema: "pg_catalog",
                                    udt_name: "int4",
                                    scope_catalog: null,
                                    scope_schema: null,
                                    scope_name: null,
                                    maximum_cardinality: null,
                                    dtd_identifier: "1",
                                    is_self_referencing: "NO",
                                    is_identity: "NO",
                                    identity_generation: null,
                                    identity_start: null,
                                    identity_increment: null,
                                    identity_maximum: null,
                                    identity_minimum: null,
                                    identity_cycle: "NO",
                                    is_generated: "NEVER",
                                    generation_expression: null,
                                    is_updatable: "NO",
                                },
                            },
                        ],
                        fakeInformationSchemaValue: {
                            table_catalog: databaseName,
                            table_schema: "test",
                            table_name: "some_materialized_view",
                            view_definition: " SELECT 1 AS id;",
                            check_option: "NONE",
                            is_updatable: "NO",
                            is_insertable_into: "NO",
                            is_trigger_updatable: "NO",
                            is_trigger_deletable: "NO",
                            is_trigger_insertable_into: "NO",
                        },
                    };
                    (0, vitest_1.expect)(result).toStrictEqual(expected);
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.it)("should fetch column comments", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create materialized view test.some_materialized_view as select 1 as id")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, db.raw("comment on column test.some_materialized_view.id is 'id column'")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, (0, extractMaterializedView_1.default)(db, makePgType("some_materialized_view"))];
                case 3:
                    result = _a.sent();
                    (0, vitest_1.expect)(result.columns[0].comment).toBe("id column");
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.it)("should handle domains, composite types, ranges and enums as well as arrays of those", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, result, actual, expected;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create domain test.some_domain as text")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create type test.some_composite as (id integer, name text)")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create type test.some_range as range(subtype=timestamptz)")];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create type test.some_enum as enum ('a', 'b', 'c')")];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create table test.some_table (\n        d test.some_domain,\n        c test.some_composite,\n        r test.some_range,\n        e test.some_enum,\n        d_a test.some_domain[],\n        c_a test.some_composite[],\n        r_a test.some_range[],\n        e_a test.some_enum[]\n    )")];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create materialized view test.some_materialized_view as select * from test.some_table")];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, (0, extractMaterializedView_1.default)(db, makePgType("some_materialized_view"))];
                case 7:
                    result = _a.sent();
                    actual = R.map(R.pick(["name", "expandedType", "type", "isArray"]), result.columns);
                    expected = [
                        {
                            name: "d",
                            expandedType: "test.some_domain",
                            type: {
                                fullName: "test.some_domain",
                                kind: "domain",
                            },
                            isArray: false,
                        },
                        {
                            name: "c",
                            expandedType: "test.some_composite",
                            type: { fullName: "test.some_composite", kind: "composite" },
                            isArray: false,
                        },
                        {
                            name: "r",
                            expandedType: "test.some_range",
                            type: {
                                fullName: "test.some_range",
                                kind: "range",
                            },
                            isArray: false,
                        },
                        {
                            name: "e",
                            expandedType: "test.some_enum",
                            type: { fullName: "test.some_enum", kind: "enum" },
                            isArray: false,
                        },
                        {
                            name: "d_a",
                            expandedType: "test.some_domain[]",
                            type: {
                                fullName: "test.some_domain",
                                kind: "domain",
                            },
                            isArray: true,
                        },
                        {
                            name: "c_a",
                            expandedType: "test.some_composite[]",
                            type: { fullName: "test.some_composite", kind: "composite" },
                            isArray: true,
                        },
                        {
                            name: "r_a",
                            expandedType: "test.some_range[]",
                            type: {
                                fullName: "test.some_range",
                                kind: "range",
                            },
                            isArray: true,
                        },
                        {
                            name: "e_a",
                            expandedType: "test.some_enum[]",
                            type: { fullName: "test.some_enum", kind: "enum" },
                            isArray: true,
                        },
                    ];
                    (0, vitest_1.expect)(actual).toEqual(expected);
                    return [2 /*return*/];
            }
        });
    }); });
});
