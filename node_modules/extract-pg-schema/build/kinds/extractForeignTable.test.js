"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var useSchema_1 = __importDefault(require("../tests/useSchema"));
var useTestKnex_1 = __importDefault(require("../tests/useTestKnex"));
var extractForeignTable_1 = __importDefault(require("./extractForeignTable"));
var makePgType = function (name, schemaName) {
    if (schemaName === void 0) { schemaName = "test"; }
    return ({
        schemaName: schemaName,
        name: name,
        kind: "foreignTable",
        comment: null,
    });
};
(0, vitest_1.describe)("extractForeignTable", function () {
    var _a = (0, useTestKnex_1.default)(), getKnex = _a[0], databaseName = _a[1];
    (0, useSchema_1.default)(getKnex, "test");
    (0, useSchema_1.default)(getKnex, "foreign_data");
    (0, vitest_1.beforeEach)(function () { return __awaiter(void 0, void 0, void 0, function () {
        var db;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create extension if not exists postgres_fdw")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create table foreign_data.dummy_table (id serial primary key, data text)")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create server local_foreign_server foreign data wrapper postgres_fdw options (dbname 'your_test_db_name', host 'localhost')")];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create user mapping for current_user server local_foreign_server options (user 'your_user_name', password 'your_password')")];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create foreign table test.foreign_dummy_table (id integer options (column_name 'id'), data text options (column_name 'data')) server local_foreign_server options (schema_name 'foreign_data', table_name 'dummy_table')")];
                case 5:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.afterEach)(function () { return __awaiter(void 0, void 0, void 0, function () {
        var db;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("drop foreign table test.foreign_dummy_table")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, db.raw("drop user mapping for current_user server local_foreign_server")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, db.raw("drop server local_foreign_server")];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, db.raw("drop table foreign_data.dummy_table")];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, db.raw("drop extension if exists postgres_fdw")];
                case 5:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.it)("should extract simplified as well as full information_schema information", function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, expected;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, extractForeignTable_1.default)(getKnex(), makePgType("foreign_dummy_table", "test"))];
                case 1:
                    result = _a.sent();
                    expected = {
                        name: "foreign_dummy_table",
                        schemaName: "test",
                        kind: "foreignTable",
                        comment: null,
                        informationSchemaValue: {
                            table_catalog: databaseName,
                            table_schema: "test",
                            table_name: "foreign_dummy_table",
                            table_type: "FOREIGN",
                            is_insertable_into: "YES",
                            is_typed: "NO",
                            commit_action: null,
                            reference_generation: null,
                            self_referencing_column_name: null,
                            user_defined_type_catalog: null,
                            user_defined_type_name: null,
                            user_defined_type_schema: null,
                        },
                        columns: [
                            {
                                name: "id",
                                expandedType: "pg_catalog.int4",
                                isArray: false,
                                type: {
                                    fullName: "pg_catalog.int4",
                                    kind: "base",
                                },
                                comment: null,
                                maxLength: null,
                                defaultValue: null,
                                isIdentity: false,
                                isUpdatable: true,
                                ordinalPosition: 1,
                                generated: "NEVER",
                                informationSchemaValue: {
                                    table_catalog: databaseName,
                                    table_schema: "test",
                                    table_name: "foreign_dummy_table",
                                    column_name: "id",
                                    ordinal_position: 1,
                                    column_default: null,
                                    is_nullable: "YES",
                                    data_type: "integer",
                                    character_maximum_length: null,
                                    character_octet_length: null,
                                    numeric_precision: 32,
                                    numeric_precision_radix: 2,
                                    numeric_scale: 0,
                                    datetime_precision: null,
                                    interval_type: null,
                                    interval_precision: null,
                                    character_set_catalog: null,
                                    character_set_schema: null,
                                    character_set_name: null,
                                    collation_catalog: null,
                                    collation_schema: null,
                                    collation_name: null,
                                    domain_catalog: null,
                                    domain_schema: null,
                                    domain_name: null,
                                    udt_catalog: databaseName,
                                    udt_schema: "pg_catalog",
                                    udt_name: "int4",
                                    scope_catalog: null,
                                    scope_schema: null,
                                    scope_name: null,
                                    maximum_cardinality: null,
                                    dtd_identifier: "1",
                                    is_self_referencing: "NO",
                                    is_identity: "NO",
                                    identity_generation: null,
                                    identity_start: null,
                                    identity_increment: null,
                                    identity_maximum: null,
                                    identity_minimum: null,
                                    identity_cycle: "NO",
                                    is_generated: "NEVER",
                                    generation_expression: null,
                                    is_updatable: "YES",
                                },
                            },
                            {
                                name: "data",
                                expandedType: "pg_catalog.text",
                                isArray: false,
                                type: {
                                    fullName: "pg_catalog.text",
                                    kind: "base",
                                },
                                comment: null,
                                maxLength: null,
                                defaultValue: null,
                                isIdentity: false,
                                isUpdatable: true,
                                ordinalPosition: 2,
                                generated: "NEVER",
                                informationSchemaValue: {
                                    table_catalog: databaseName,
                                    table_schema: "test",
                                    table_name: "foreign_dummy_table",
                                    column_name: "data",
                                    ordinal_position: 2,
                                    column_default: null,
                                    is_nullable: "YES",
                                    data_type: "text",
                                    character_maximum_length: null,
                                    character_octet_length: 1073741824,
                                    numeric_precision: null,
                                    numeric_precision_radix: null,
                                    numeric_scale: null,
                                    datetime_precision: null,
                                    interval_type: null,
                                    interval_precision: null,
                                    character_set_catalog: null,
                                    character_set_schema: null,
                                    character_set_name: null,
                                    collation_catalog: null,
                                    collation_schema: null,
                                    collation_name: null,
                                    domain_catalog: null,
                                    domain_schema: null,
                                    domain_name: null,
                                    udt_catalog: databaseName,
                                    udt_schema: "pg_catalog",
                                    udt_name: "text",
                                    scope_catalog: null,
                                    scope_schema: null,
                                    scope_name: null,
                                    maximum_cardinality: null,
                                    dtd_identifier: "2",
                                    is_self_referencing: "NO",
                                    is_identity: "NO",
                                    identity_generation: null,
                                    identity_start: null,
                                    identity_increment: null,
                                    identity_maximum: null,
                                    identity_minimum: null,
                                    identity_cycle: "NO",
                                    is_generated: "NEVER",
                                    generation_expression: null,
                                    is_updatable: "YES",
                                },
                            },
                        ],
                    };
                    (0, vitest_1.expect)(result).toStrictEqual(expected);
                    return [2 /*return*/];
            }
        });
    }); });
});
