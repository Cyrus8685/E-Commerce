"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateActionMap = void 0;
var commentMapQueryPart_1 = __importDefault(require("./query-parts/commentMapQueryPart"));
var indexMapQueryPart_1 = __importDefault(require("./query-parts/indexMapQueryPart"));
exports.updateActionMap = {
    a: "NO ACTION",
    r: "RESTRICT",
    c: "CASCADE",
    n: "SET NULL",
    d: "SET DEFAULT",
};
var referenceMapQueryPart = "\n      SELECT\n        source_attr.attname AS \"column_name\",\n        json_agg(json_build_object(\n            'schemaName', expanded_constraint.target_schema,\n            'tableName', expanded_constraint.target_table,\n            'columnName', target_attr.attname,\n            'onUpdate', case expanded_constraint.confupdtype\n              ".concat(Object.entries(exports.updateActionMap)
    .map(function (_a) {
    var key = _a[0], action = _a[1];
    return "when '".concat(key, "' then '").concat(action, "'");
})
    .join("\n"), "\n              end,\n            'onDelete', case expanded_constraint.confdeltype\n              ").concat(Object.entries(exports.updateActionMap)
    .map(function (_a) {
    var key = _a[0], action = _a[1];
    return "when '".concat(key, "' then '").concat(action, "'");
})
    .join("\n"), "\n              end,\n            'name', expanded_constraint.conname\n            )) AS references\n      FROM (\n        SELECT\n          unnest(conkey) AS \"source_attnum\",\n          unnest(confkey) AS \"target_attnum\",\n          target_namespace.nspname as \"target_schema\",\n          target_class.relname as \"target_table\",\n          confrelid,\n          conrelid,\n          conname,\n          confupdtype,\n          confdeltype\n        FROM\n          pg_constraint\n          JOIN pg_class source_class ON conrelid = source_class.oid\n          JOIN pg_namespace source_namespace ON source_class.relnamespace = source_namespace.oid\n    \n          JOIN pg_class target_class ON confrelid = target_class.oid\n          JOIN pg_namespace target_namespace ON target_class.relnamespace = target_namespace.oid\n        WHERE\n          source_class.relname = :table_name\n          AND source_namespace.nspname = :schema_name\n          AND contype = 'f') expanded_constraint\n        JOIN pg_attribute target_attr ON target_attr.attrelid = expanded_constraint.confrelid\n          AND target_attr.attnum = expanded_constraint.target_attnum\n        JOIN pg_attribute source_attr ON source_attr.attrelid = expanded_constraint.conrelid\n          AND source_attr.attnum = expanded_constraint.source_attnum\n        JOIN pg_class target_class ON target_class.oid = expanded_constraint.confrelid\n      WHERE\n        target_class.relispartition = FALSE\n      GROUP BY\n        source_attr.attname\n");
var typeMapQueryPart = "\nselect\n  pg_attribute.attname as \"column_name\",\n  typnamespace::regnamespace::text||'.'||substring(typname, (case when attndims > 0 then 2 else 1 end))::text||repeat('[]', attndims) as \"expanded_name\",\n  attndims as \"dimensions\",\n  json_build_object(\n\t  'fullName', typnamespace::regnamespace::text||'.'||substring(typname, (case when attndims > 0 then 2 else 1 end))::text,\n    'kind', case \n      when typtype = 'd' then 'domain'\n      when typtype = 'r' then 'range'\n      when typtype = 'c' then 'composite'\n      when typtype = 'e' then 'enum'\n      when typtype = 'b' then COALESCE((select case \n        when i.typtype = 'r' then 'range' \n        when i.typtype = 'd' then 'domain' \n        when i.typtype = 'c' then 'composite' \n        when i.typtype = 'e' then 'enum' \n      end as inner_kind from pg_type i where i.oid = t.typelem), 'base')\n    ELSE 'unknown'\n    end\n  ) as \"type_info\"\nfrom pg_type t\njoin pg_attribute on pg_attribute.atttypid = t.oid\njoin pg_class on pg_attribute.attrelid = pg_class.oid\njoin pg_namespace on pg_class.relnamespace = pg_namespace.oid\nWHERE\n  pg_namespace.nspname = :schema_name\n  and pg_class.relname = :table_name\n";
var extractTable = function (db, table) { return __awaiter(void 0, void 0, void 0, function () {
    var informationSchemaValue, columnsQuery, columns, indicesQuery, indices, checkQuery, checks, rlsQuery, rls;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, db
                    .from("information_schema.tables")
                    .where({
                    table_name: table.name,
                    table_schema: table.schemaName,
                })
                    .select("*")];
            case 1:
                informationSchemaValue = (_a.sent())[0];
                return [4 /*yield*/, db.raw("\n    WITH \n    reference_map AS (\n      ".concat(referenceMapQueryPart, "\n    ),\n    index_map AS (\n      ").concat(indexMapQueryPart_1.default, "\n    ),\n    type_map AS (\n      ").concat(typeMapQueryPart, "\n    ),\n    comment_map AS (\n      ").concat(commentMapQueryPart_1.default, "\n    )\n    SELECT\n      columns.column_name AS \"name\",\n      type_map.expanded_name AS \"expandedType\",\n      type_map.dimensions AS \"dimensions\",\n      type_map.type_info AS \"type\",\n      comment_map.comment AS \"comment\",\n      character_maximum_length AS \"maxLength\", \n      column_default AS \"defaultValue\", \n      is_nullable = 'YES' AS \"isNullable\", \n      data_type = 'ARRAY' AS \"isArray\", \n      is_identity = 'YES' AS \"isIdentity\", \n      is_updatable = 'YES' AS \"isUpdatable\", \n      ordinal_position AS \"ordinalPosition\", \n      CASE WHEN is_identity = 'YES' THEN\n        identity_generation\n      ELSE\n        is_generated\n      END AS \"generated\", \n      COALESCE(index_map.is_primary, FALSE) AS \"isPrimaryKey\", \n      COALESCE(index_map.indices, '[]'::json) AS \"indices\", \n      COALESCE(reference_map.references, '[]'::json) AS \"references\", \n      \n      row_to_json(columns.*) AS \"informationSchemaValue\"\n    FROM\n      information_schema.columns\n      LEFT JOIN index_map ON index_map.column_name = columns.column_name\n      LEFT JOIN reference_map ON reference_map.column_name = columns.column_name\n      LEFT JOIN type_map ON type_map.column_name = columns.column_name\n      LEFT JOIN comment_map ON comment_map.column_name = columns.column_name\n    WHERE\n      table_name = :table_name\n      AND table_schema = :schema_name;\n  "), { table_name: table.name, schema_name: table.schemaName })];
            case 2:
                columnsQuery = _a.sent();
                columns = columnsQuery.rows.map(function (row) {
                    var _a;
                    return (__assign(__assign({}, row), { 
                        // Add this deprecated field for backwards compatibility
                        reference: (_a = row.references[0]) !== null && _a !== void 0 ? _a : null }));
                });
                return [4 /*yield*/, db.raw("\n    WITH index_columns AS (\n      SELECT\n        ix.indexrelid,\n        json_agg(json_build_object(\n          'name', a.attname,\n          'definition', pg_get_indexdef(ix.indexrelid, keys.key_order::integer, true)\n        ) ORDER BY keys.key_order) AS columns\n      FROM\n        pg_index ix\n        CROSS JOIN unnest(ix.indkey) WITH ORDINALITY AS keys(key, key_order)\n        LEFT JOIN pg_attribute a ON ix.indrelid = a.attrelid AND key = a.attnum\n      GROUP BY ix.indexrelid, ix.indrelid\n    )\n    SELECT\n      i.relname AS \"name\",\n      ix.indisprimary AS \"isPrimary\",\n      ix.indisunique AS \"isUnique\",\n      index_columns.columns\n    FROM\n      pg_index ix\n      INNER JOIN pg_class i ON ix.indexrelid = i.oid\n      INNER JOIN pg_class t ON ix.indrelid = t.oid\n      INNER JOIN pg_namespace n ON t.relnamespace = n.oid\n      INNER JOIN index_columns ON ix.indexrelid = index_columns.indexrelid\n    WHERE\n      t.relname = :table_name\n      AND n.nspname = :schema_name\n    ", { table_name: table.name, schema_name: table.schemaName })];
            case 3:
                indicesQuery = _a.sent();
                indices = indicesQuery.rows;
                return [4 /*yield*/, db.raw("\n    SELECT\n      source_namespace.nspname as \"schema\",\n      source_class.relname as \"table\",\n      json_agg(json_build_object(\n                 'name', con.conname,\n                 'clause', SUBSTRING(pg_get_constraintdef(con.oid) FROM 7)\n      )) as checks\n    FROM\n     pg_constraint con,\n     pg_class source_class,\n     pg_namespace source_namespace \n    WHERE\n     source_class.relname = :table_name\n     AND source_namespace.nspname = :schema_name\n     AND conrelid = source_class.oid \n     AND source_class.relnamespace = source_namespace.oid \n     AND con.contype = 'c'\n    GROUP BY source_namespace.nspname, source_class.relname;\n  ", { table_name: table.name, schema_name: table.schemaName })];
            case 4:
                checkQuery = _a.sent();
                checks = checkQuery.rows
                    .flatMap(function (row) { return row.checks; })
                    .map(function (_a) {
                    var name = _a.name, clause = _a.clause;
                    var numberOfBrackets = clause.startsWith("((") && clause.endsWith("))") ? 2 : 1;
                    return {
                        name: name,
                        clause: clause.slice(numberOfBrackets, clause.length - numberOfBrackets),
                    };
                });
                return [4 /*yield*/, db.raw("\n    SELECT\n      c.relrowsecurity AS \"isRowLevelSecurityEnabled\",\n      c.relforcerowsecurity AS \"isRowLevelSecurityEnforced\",\n      coalesce(json_agg(json_build_object(\n        'name', p.policyname,\n        'isPermissive', p.permissive = 'PERMISSIVE',\n        'rolesAppliedTo', p.roles,\n        'commandType', p.cmd,\n        'visibilityExpression', p.qual,\n        'modifiabilityExpression', p.with_check\n      )) FILTER (WHERE p.policyname IS NOT NULL), '[]'::json) AS \"securityPolicies\"\n    FROM\n      pg_class c\n      INNER JOIN pg_namespace n ON c.relnamespace = n.oid\n      LEFT JOIN pg_policies p ON c.relname = p.tablename AND n.nspname = p.schemaname\n    WHERE\n      c.relname = :table_name\n      AND n.nspname = :schema_name\n    GROUP BY c.relrowsecurity, c.relforcerowsecurity\n    ", { table_name: table.name, schema_name: table.schemaName })];
            case 5:
                rlsQuery = _a.sent();
                rls = rlsQuery.rows[0];
                return [2 /*return*/, __assign(__assign(__assign({}, table), { indices: indices, checks: checks, informationSchemaValue: informationSchemaValue, columns: columns }), rls)];
        }
    });
}); };
exports.default = extractTable;
