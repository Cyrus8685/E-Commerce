"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var useSchema_1 = __importDefault(require("../tests/useSchema"));
var useTestKnex_1 = __importDefault(require("../tests/useTestKnex"));
var fetchTypes_1 = __importDefault(require("./fetchTypes"));
(0, vitest_1.describe)("fetchTypes", function () {
    var getKnex = (0, useTestKnex_1.default)()[0];
    (0, useSchema_1.default)(getKnex, "test");
    (0, vitest_1.it)("should fetch a simple type", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, types;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create table test.some_table (id integer)")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, (0, fetchTypes_1.default)(db, ["test"])];
                case 2:
                    types = _a.sent();
                    (0, vitest_1.expect)(types).toHaveLength(1);
                    (0, vitest_1.expect)(types[0]).toEqual({
                        name: "some_table",
                        schemaName: "test",
                        kind: "table",
                        comment: null,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.it)("should fetch all kinds", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, types;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create table test.some_table (id integer)")];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create view test.some_view as select 1 as id")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create materialized view test.some_materialized_view as select 1 as id")];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create type test.some_composite_type as (id integer)")];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create type test.some_enum as enum ('a', 'b')")];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create domain test.some_domain as text")];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, db.raw("create type test.some_range as range (subtype = integer)")];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, (0, fetchTypes_1.default)(db, ["test"])];
                case 8:
                    types = _a.sent();
                    (0, vitest_1.expect)(types.map(function (t) { return [t.name, t.kind]; })).toEqual([
                        ["some_table", "table"],
                        ["some_view", "view"],
                        ["some_materialized_view", "materializedView"],
                        ["some_composite_type", "compositeType"],
                        ["some_enum", "enum"],
                        ["some_domain", "domain"],
                        ["some_range", "range"],
                        // ['some_multirange', 'multiRange'],
                        // ['some_procedure', 'procedure'],
                        // ['some_function', 'function'],
                        // ['some_aggregate', 'aggregate'],
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    (0, vitest_1.it)("should fetch comments", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, types;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = getKnex();
                    // Tables are a "class" in postgres.
                    return [4 /*yield*/, db.raw("create table test.some_table (id integer)")];
                case 1:
                    // Tables are a "class" in postgres.
                    _a.sent();
                    return [4 /*yield*/, db.raw("comment on table test.some_table is 'some table comment'")];
                case 2:
                    _a.sent();
                    // Domains are "types", which is different. Make sure we get those commments as well.
                    return [4 /*yield*/, db.raw("create domain test.some_domain as text")];
                case 3:
                    // Domains are "types", which is different. Make sure we get those commments as well.
                    _a.sent();
                    return [4 /*yield*/, db.raw("comment on domain test.some_domain is 'some domain comment'")];
                case 4:
                    _a.sent();
                    // Composite types are both types and classes. The comment comes from the class.
                    return [4 /*yield*/, db.raw("create type test.some_composite_type as (id integer)")];
                case 5:
                    // Composite types are both types and classes. The comment comes from the class.
                    _a.sent();
                    return [4 /*yield*/, db.raw("comment on type test.some_composite_type is 'some composite type comment'")];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, (0, fetchTypes_1.default)(db, ["test"])];
                case 7:
                    types = _a.sent();
                    (0, vitest_1.expect)(types.map(function (t) { return [t.name, t.comment]; })).toEqual([
                        ["some_table", "some table comment"],
                        ["some_domain", "some domain comment"],
                        ["some_composite_type", "some composite type comment"],
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
});
