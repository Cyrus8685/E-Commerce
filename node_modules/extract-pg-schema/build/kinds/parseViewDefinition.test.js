"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var parseViewDefinition_1 = __importDefault(require("./parseViewDefinition"));
(0, vitest_1.describe)("parseViewDefinition", function () {
    (0, vitest_1.it)("should understand a trivial select", function () {
        var query = "SELECT id FROM service";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "id",
                source: {
                    schema: "public",
                    table: "service",
                    column: "id",
                },
            },
        ]);
    });
    (0, vitest_1.it)("should understand a select with explicit schema", function () {
        var query = "SELECT id FROM store.service";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "id",
                source: {
                    schema: "store",
                    table: "service",
                    column: "id",
                },
            },
        ]);
    });
    (0, vitest_1.it)("should understand a select with join", function () {
        var query = "SELECT service.id,\n    service.\"createdAt\",\n    service.name,\n    \"oauthConnection\".\"createdBy\" AS owner\n   FROM service\n     LEFT JOIN \"oauthConnection\" ON service.\"oauthConnectionId\" = \"oauthConnection\".id;";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "id",
                source: {
                    schema: "public",
                    table: "service",
                    column: "id",
                },
            },
            {
                viewColumn: "createdAt",
                source: {
                    schema: "public",
                    table: "service",
                    column: "createdAt",
                },
            },
            {
                viewColumn: "name",
                source: {
                    schema: "public",
                    table: "service",
                    column: "name",
                },
            },
            {
                viewColumn: "owner",
                source: {
                    schema: "public",
                    table: "oauthConnection",
                    column: "createdBy",
                },
            },
        ]);
    });
    (0, vitest_1.it)("should work with multiple schemas and with aliases", function () {
        var query = "\n    select u.id as uid, um.id as umid \n      from test1.users u \n      join test2.user_managers um \n      on um.user_id = u.id;";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "uid",
                source: {
                    schema: "test1",
                    table: "users",
                    column: "id",
                },
            },
            {
                viewColumn: "umid",
                source: {
                    schema: "test2",
                    table: "user_managers",
                    column: "id",
                },
            },
        ]);
    });
    (0, vitest_1.it)("should return undefined for unresolvable columns", function () {
        var query = "\n  SELECT cu.customer_id AS id,\n    (cu.first_name::text || ' '::text) || cu.last_name::text AS name,\n    a.address,\n    a.postal_code AS \"zip code\",\n    a.phone,\n    city.city,\n    country.country,\n        CASE\n            WHEN cu.activebool THEN 'active'::text\n            ELSE ''::text\n        END AS notes,\n    cu.store_id AS sid\n   FROM customer cu\n     JOIN address a ON cu.address_id = a.address_id\n     JOIN city ON a.city_id = city.city_id\n     JOIN country ON city.country_id = country.country_id;";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "id",
                source: {
                    schema: "public",
                    table: "customer",
                    column: "customer_id",
                },
            },
            {
                viewColumn: "name",
                source: undefined,
            },
            {
                viewColumn: "address",
                source: {
                    schema: "public",
                    table: "address",
                    column: "address",
                },
            },
            {
                viewColumn: "zip code",
                source: {
                    schema: "public",
                    table: "address",
                    column: "postal_code",
                },
            },
            {
                viewColumn: "phone",
                source: {
                    schema: "public",
                    table: "address",
                    column: "phone",
                },
            },
            {
                viewColumn: "city",
                source: {
                    schema: "public",
                    table: "city",
                    column: "city",
                },
            },
            {
                viewColumn: "country",
                source: {
                    schema: "public",
                    table: "country",
                    column: "country",
                },
            },
            {
                viewColumn: "notes",
                source: undefined,
            },
            {
                viewColumn: "sid",
                source: {
                    schema: "public",
                    table: "customer",
                    column: "store_id",
                },
            },
        ]);
    });
    (0, vitest_1.it)("should work with a minimalistic WITH clause", function () {
        var query = "\n    WITH RECURSIVE hierarchy_cte AS (\n      SELECT posting.date,\n         account.name AS account,\n         posting.amount\n        FROM posting\n          JOIN account ON account.id = posting.account_id\n     )\n    SELECT hierarchy_cte.date,\n    hierarchy_cte.account,\n    hierarchy_cte.amount\n    FROM hierarchy_cte;\n    ";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "date",
                source: {
                    schema: "public",
                    table: "posting",
                    column: "date",
                },
            },
            {
                viewColumn: "account",
                source: {
                    schema: "public",
                    table: "account",
                    column: "name",
                },
            },
            {
                viewColumn: "amount",
                source: {
                    schema: "public",
                    table: "posting",
                    column: "amount",
                },
            },
        ]);
    });
    (0, vitest_1.it)("should resolve kanel#481", function () {
        var query = "\n    WITH RECURSIVE hierarchy_cte AS (\n      SELECT posting.date,\n         account.name AS account,\n         posting.amount\n        FROM posting\n          JOIN account ON account.id = posting.account_id\n     UNION ALL\n      SELECT hierarchy_cte_1.date,\n         trim_array(hierarchy_cte_1.account, 1) AS account,\n         hierarchy_cte_1.amount\n        FROM hierarchy_cte hierarchy_cte_1\n       WHERE array_length(hierarchy_cte_1.account, 1) > 1\n     )\n    SELECT hierarchy_cte.date,\n    hierarchy_cte.account,\n    hierarchy_cte.amount\n    FROM hierarchy_cte;\n    ";
        var def = (0, parseViewDefinition_1.default)(query, "public");
        (0, vitest_1.expect)(def).toEqual([
            {
                viewColumn: "date",
                source: {
                    schema: "public",
                    table: "posting",
                    column: "date",
                },
            },
            {
                viewColumn: "account",
                source: {
                    schema: "public",
                    table: "account",
                    column: "name",
                },
            },
            {
                viewColumn: "amount",
                source: {
                    schema: "public",
                    table: "posting",
                    column: "amount",
                },
            },
        ]);
    });
});
