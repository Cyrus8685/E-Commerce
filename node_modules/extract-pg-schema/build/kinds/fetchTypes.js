"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fetchExtensionItemIds_1 = __importDefault(require("../fetchExtensionItemIds"));
var PgType_1 = require("./PgType");
var fetchTypes = function (db, schemaNames) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, extClassOids, extTypeOids;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, fetchExtensionItemIds_1.default)(db)];
            case 1:
                _a = _b.sent(), extClassOids = _a.extClassOids, extTypeOids = _a.extTypeOids;
                return [2 /*return*/, db
                        .select("typname as name", "nspname as schemaName", db.raw("case typtype\n        when 'c' then case relkind\n          ".concat(Object.entries(PgType_1.classKindMap)
                        .map(function (_a) {
                        var key = _a[0], classKind = _a[1];
                        return "when '".concat(key, "' then '").concat(classKind, "'");
                    })
                        .join("\n"), "\n          end\n      ").concat(Object.entries(PgType_1.typeKindMap)
                        .map(function (_a) {
                        var key = _a[0], typeKind = _a[1];
                        return "when '".concat(key, "' then '").concat(typeKind, "'");
                    })
                        .join("\n"), "\n       end as kind")), db.raw(
                    // Comments on the class take prescedent, but for composite types,
                    // they will reside on the type itself.
                    "COALESCE(\n          obj_description(COALESCE(pg_class.oid, pg_type.oid)), \n          obj_description(pg_type.oid)\n        ) as comment"))
                        .from("pg_catalog.pg_type")
                        .join("pg_catalog.pg_namespace", "pg_namespace.oid", "pg_type.typnamespace")
                        .fullOuterJoin("pg_catalog.pg_class", "pg_type.typrelid", "pg_class.oid")
                        .where(function (b1) {
                        return b1
                            .where("pg_class.oid", "is", null)
                            .orWhere(function (b2) {
                            return b2
                                .where("pg_class.relispartition", false)
                                .whereNotIn("pg_class.relkind", ["S"])
                                .whereNotIn("pg_class.oid", extClassOids);
                        });
                    })
                        .whereNotIn("pg_type.oid", extTypeOids)
                        .whereIn("pg_type.typtype", __spreadArray(["c"], Object.keys(PgType_1.typeKindMap), true))
                        .whereIn("pg_namespace.nspname", schemaNames)];
        }
    });
}); };
exports.default = fetchTypes;
