import type { Knex } from "knex";
import type InformationSchemaColumn from "../information_schema/InformationSchemaColumn";
import type PgType from "./PgType";
/**
 * Attribute type in a composite type.
 */
export type AttributeType = {
    /**
     * Qualified name of the type.
     */
    fullName: string;
    /**
     * Kind of the type.
     */
    kind: "base" | "range" | "domain" | "composite" | "enum";
};
/**
 * Attribute of a composite type.
 */
export interface CompositeTypeAttribute {
    /**
     * Attribute name.
     */
    name: string;
    /**
     * Expanded type name. If the type is an array, brackets will be appended
     * to the type name.
     */
    expandedType: string;
    /**
     * Type information.
     */
    type: AttributeType;
    /**
     * Comment on the attribute.
     */
    comment: string | null;
    /**
     * Default value of the attribute.
     */
    defaultValue: any;
    /**
     * Whether the attribute is an array.
     */
    isArray: boolean;
    /**
     * Maximum length of the attribute.
     */
    maxLength: number | null;
    /**
     * Whether the attribute is nullable.
     */
    isNullable: boolean;
    /**
     * Behavior of the generated attribute. "ALWAYS" if always generated,
     * "NEVER" if never generated, "BY DEFAULT" if generated when a value
     * is not provided.
     */
    generated: "ALWAYS" | "NEVER" | "BY DEFAULT";
    /**
     * Whether the attribute is updatable.
     */
    isUpdatable: boolean;
    /**
     * Whether the attribute is an identity attribute.
     */
    isIdentity: boolean;
    /**
     * Ordinal position of the attribute in the composite type. Starts from 1.
     */
    ordinalPosition: number;
    /**
     * The Postgres information_schema views do not contain info about materialized views.
     * This value is the result of a query that matches the one for regular views.
     * Use with caution, not all fields are guaranteed to be meaningful and/or accurate.
     */
    fakeInformationSchemaValue: InformationSchemaColumn;
}
/**
 * Composite type in a schema.
 */
export interface CompositeTypeDetails extends PgType<"compositeType"> {
    /**
     * Attributes of the composite type.
     */
    attributes: CompositeTypeAttribute[];
}
declare const extractCompositeType: (db: Knex, compositeType: PgType<"compositeType">) => Promise<CompositeTypeDetails>;
export default extractCompositeType;
