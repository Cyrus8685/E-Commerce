"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commentMapQueryPart_1 = __importDefault(require("./query-parts/commentMapQueryPart"));
var typeMapQueryPart = "\nselect\n  pg_attribute.attname as \"column_name\",\n  typnamespace::regnamespace::text||'.'||substring(typname, (case when attndims > 0 then 2 else 1 end))::text||repeat('[]', attndims) as \"expanded_name\",\n  attndims as \"dimensions\",\n  json_build_object(\n\t  'fullName', typnamespace::regnamespace::text||'.'||substring(typname, (case when attndims > 0 then 2 else 1 end))::text,\n    'kind', case \n      when typtype = 'd' then 'domain'\n      when typtype = 'r' then 'range'\n      when typtype = 'c' then 'composite'\n      when typtype = 'e' then 'enum'\n      when typtype = 'b' then COALESCE((select case \n        when i.typtype = 'r' then 'range' \n        when i.typtype = 'd' then 'domain' \n        when i.typtype = 'c' then 'composite' \n        when i.typtype = 'e' then 'enum' \n      end as inner_kind from pg_type i where i.oid = t.typelem), 'base')\n    ELSE 'unknown'\n    end\n  ) as \"type_info\"\nfrom pg_type t\njoin pg_attribute on pg_attribute.atttypid = t.oid\njoin pg_class on pg_attribute.attrelid = pg_class.oid\njoin pg_namespace on pg_class.relnamespace = pg_namespace.oid\nWHERE\n  pg_namespace.nspname = :schema_name\n  and pg_class.relname = :table_name\n";
var extractForeignTable = function (db, foreignTable) { return __awaiter(void 0, void 0, void 0, function () {
    var informationSchemaValue, columnsQuery, columns;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, db
                    .from("information_schema.tables")
                    .where({
                    table_name: foreignTable.name,
                    table_schema: foreignTable.schemaName,
                })
                    .select("*")];
            case 1:
                informationSchemaValue = (_a.sent())[0];
                return [4 /*yield*/, db.raw("\n    WITH \n    type_map AS (\n      ".concat(typeMapQueryPart, "\n    ),\n    comment_map AS (\n      ").concat(commentMapQueryPart_1.default, "\n    )\n    SELECT\n      columns.column_name AS \"name\",\n      type_map.expanded_name AS \"expandedType\",\n      type_map.type_info AS \"type\",\n      comment_map.comment AS \"comment\",\n      character_maximum_length AS \"maxLength\", \n      column_default AS \"defaultValue\", \n      data_type = 'ARRAY' AS \"isArray\", \n      is_identity = 'YES' AS \"isIdentity\", \n      is_updatable = 'YES' AS \"isUpdatable\", \n      ordinal_position AS \"ordinalPosition\", \n      CASE WHEN is_identity = 'YES' THEN\n        identity_generation\n      ELSE\n        is_generated\n      END AS \"generated\", \n      \n      row_to_json(columns.*) AS \"informationSchemaValue\"\n    FROM\n      information_schema.columns\n      LEFT JOIN type_map ON type_map.column_name = columns.column_name\n      LEFT JOIN comment_map ON comment_map.column_name = columns.column_name\n    WHERE\n      table_name = :table_name\n      AND table_schema = :schema_name;\n  "), { table_name: foreignTable.name, schema_name: foreignTable.schemaName })];
            case 2:
                columnsQuery = _a.sent();
                columns = columnsQuery.rows;
                return [2 /*return*/, __assign(__assign({}, foreignTable), { informationSchemaValue: informationSchemaValue, columns: columns })];
        }
    });
}); };
exports.default = extractForeignTable;
