"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var resolveViewColumns = function (schemas) {
    var resolve = function (view) {
        var columns = view.columns.map(function (column) {
            var _a, _b, _c;
            var source = column.source;
            var _loop_1 = function () {
                var predicate = function (col) { return col.name === source.column; };
                var sourceColumn = (_a = schemas[source.schema].tables
                    .find(function (table) { return table.name === source.table; })) === null || _a === void 0 ? void 0 : _a.columns.find(function (element) { return predicate(element); });
                if (!sourceColumn) {
                    sourceColumn = (_b = schemas[source.schema].views
                        .find(function (view) { return view.name === source.table; })) === null || _b === void 0 ? void 0 : _b.columns.find(function (element) { return predicate(element); });
                }
                if (!sourceColumn) {
                    sourceColumn = (_c = schemas[source.schema].materializedViews
                        .find(function (view) { return view.name === source.table; })) === null || _c === void 0 ? void 0 : _c.columns.find(function (element) { return predicate(element); });
                }
                if (!sourceColumn) {
                    throw new Error("Column ".concat(source.schema, ".").concat(source.table, ".").concat(source.column, " was not found.."));
                }
                if (sourceColumn.source) {
                    source = sourceColumn.source;
                }
                else {
                    return { value: __assign(__assign({}, column), { isNullable: sourceColumn.isNullable, reference: sourceColumn.reference, references: sourceColumn.references, isPrimaryKey: sourceColumn.isPrimaryKey, indices: sourceColumn.indices }) };
                }
            };
            while (source) {
                var state_1 = _loop_1();
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            return column;
        });
        return __assign(__assign({}, view), { columns: columns });
    };
    var result = __assign({}, schemas);
    for (var _i = 0, _a = Object.keys(result); _i < _a.length; _i++) {
        var schema = _a[_i];
        result[schema].views = result[schema].views.map(function (element) {
            return resolve(element);
        });
        result[schema].materializedViews = result[schema].materializedViews.map(function (element) { return resolve(element); });
    }
    return result;
};
exports.default = resolveViewColumns;
