"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsonpath_1 = __importDefault(require("jsonpath"));
var pg_query_emscripten_1 = __importDefault(require("pg-query-emscripten"));
var ramda_1 = require("ramda");
function parseViewDefinition(selectStatement) {
    var _a, _b;
    var ast = pg_query_emscripten_1.default.parse(selectStatement).parse_tree[0];
    var selectAst = (_b = (_a = ast.RawStmt) === null || _a === void 0 ? void 0 : _a.stmt) === null || _b === void 0 ? void 0 : _b.SelectStmt;
    if (!selectAst) {
        throw new Error("The string '".concat(selectStatement, "' doesn't parse as a select statement."));
    }
    var firstFromTable = selectAst.fromClause[0].RangeVar;
    var aliasDefinitions = jsonpath_1.default.query(ast, '$.RawStmt.stmt.SelectStmt.fromClause..[?(@.alias)]');
    var aliases = aliasDefinitions.reduce(function (acc, _a) {
        var _b;
        var schemaname = _a.schemaname, relname = _a.relname, alias = _a.alias;
        return (__assign(__assign({}, acc), (_b = {}, _b[alias.Alias.aliasname] = { schema: schemaname, table: relname }, _b)));
    }, {});
    var selectTargets = jsonpath_1.default.query(ast, '$.RawStmt.stmt.SelectStmt.targetList[*].ResTarget');
    var viewColumns = selectTargets.map(function (selectTarget) {
        var _a;
        var fields = jsonpath_1.default.query(selectTarget, '$.val[*].fields[*].String.str');
        var table = firstFromTable === null || firstFromTable === void 0 ? void 0 : firstFromTable.relname;
        var schema = firstFromTable === null || firstFromTable === void 0 ? void 0 : firstFromTable.schemaname;
        if (fields.length === 2) {
            var tableRel = fields[0];
            if (tableRel in aliases) {
                table = aliases[tableRel].table;
                schema = (_a = aliases[tableRel].schema) !== null && _a !== void 0 ? _a : schema;
            }
            else {
                table = tableRel;
            }
        }
        return {
            name: selectTarget.name || (0, ramda_1.last)(fields),
            schema: schema,
            table: table,
            column: (0, ramda_1.last)(fields),
            // x,
        };
    });
    return viewColumns;
}
exports.default = parseViewDefinition;
