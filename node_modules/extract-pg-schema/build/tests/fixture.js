"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.afterAll = exports.beforeAll = exports.afterEach = exports.beforeEach = exports.describe = exports.test = exports.it = exports.expect = void 0;
var vitest_1 = require("vitest");
var vitest_2 = require("vitest");
Object.defineProperty(exports, "expect", { enumerable: true, get: function () { return vitest_2.expect; } });
Object.defineProperty(exports, "it", { enumerable: true, get: function () { return vitest_2.it; } });
Object.defineProperty(exports, "test", { enumerable: true, get: function () { return vitest_2.test; } });
var globalScope = '';
var makeDescribeForScope = function (scope) { return function (name, fn) {
    (0, vitest_1.describe)(name, function () {
        var previousD = exports.describe;
        globalScope = "".concat(scope, "/").concat(name);
        exports.describe = makeDescribeForScope(globalScope);
        fn();
        exports.describe = previousD;
    });
}; };
exports.describe = makeDescribeForScope('');
var makeHook = function (map, viFunc, type) {
    return function (fn, timeout) {
        if (!map[globalScope]) {
            map[globalScope] = [];
            // Call the function with the scope that is *currently* set,
            // not what it will be when we reach it.
            var closureScope_1 = globalScope;
            viFunc(function () { return __awaiter(void 0, void 0, void 0, function () {
                var _i, _a, fn_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _i = 0, _a = map[closureScope_1];
                            _b.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            fn_1 = _a[_i];
                            return [4 /*yield*/, fn_1()];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }, timeout);
        }
        if (type === 'after') {
            map[globalScope].unshift(fn);
        }
        else {
            map[globalScope].push(fn);
        }
    };
};
var beforeEachMap = {};
exports.beforeEach = makeHook(beforeEachMap, vitest_1.beforeEach, 'before');
var afterEachMap = {};
exports.afterEach = makeHook(afterEachMap, vitest_1.afterEach, 'after');
var beforeAllMap = {};
exports.beforeAll = makeHook(beforeAllMap, vitest_1.beforeAll, 'before');
var afterAllMap = {};
exports.afterAll = makeHook(afterAllMap, vitest_1.afterAll, 'after');
