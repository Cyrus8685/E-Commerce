"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var fetchExtensionItemIds_1 = __importDefault(require("./fetchExtensionItemIds"));
var useSchema_1 = __importDefault(require("./tests/useSchema"));
var useTestKnex_1 = __importDefault(require("./tests/useTestKnex"));
(0, vitest_1.describe)("fetchExtensionItemIds", function () {
    var getKnex = (0, useTestKnex_1.default)()[0];
    (0, useSchema_1.default)(getKnex, "test");
    // NOTE: be aware that this test depends on specifics of certain Postgres extensions.
    // If it fails there is a chance that it's because the extensions themselves have changed,
    // not necessarily the test.
    (0, vitest_1.it)("should fetch extension item ids", function () { return __awaiter(void 0, void 0, void 0, function () {
        var db, r, classes, _i, _a, extClassOid, c, types, _b, _c, extTypeOid, c, procs, _d, _e, extProcOid, c;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    db = getKnex();
                    return [4 /*yield*/, db.raw("create extension if not exists pg_trgm")];
                case 1:
                    _f.sent();
                    return [4 /*yield*/, db.raw("create extension if not exists pg_stat_statements")];
                case 2:
                    _f.sent();
                    return [4 /*yield*/, db.raw("create extension if not exists citext")];
                case 3:
                    _f.sent();
                    return [4 /*yield*/, (0, fetchExtensionItemIds_1.default)(db)];
                case 4:
                    r = _f.sent();
                    classes = [];
                    _i = 0, _a = r.extClassOids;
                    _f.label = 5;
                case 5:
                    if (!(_i < _a.length)) return [3 /*break*/, 8];
                    extClassOid = _a[_i];
                    return [4 /*yield*/, db.raw("select * from pg_catalog.pg_class where oid = ".concat(extClassOid))];
                case 6:
                    c = _f.sent();
                    classes.push(c.rows[0].relname);
                    _f.label = 7;
                case 7:
                    _i++;
                    return [3 /*break*/, 5];
                case 8:
                    (0, vitest_1.expect)(classes).toContain("pg_stat_statements_info");
                    (0, vitest_1.expect)(classes).toContain("pg_stat_statements");
                    types = [];
                    _b = 0, _c = r.extTypeOids;
                    _f.label = 9;
                case 9:
                    if (!(_b < _c.length)) return [3 /*break*/, 12];
                    extTypeOid = _c[_b];
                    return [4 /*yield*/, db.raw("select * from pg_catalog.pg_type where oid = ".concat(extTypeOid))];
                case 10:
                    c = _f.sent();
                    types.push(c.rows[0].typname);
                    _f.label = 11;
                case 11:
                    _b++;
                    return [3 /*break*/, 9];
                case 12:
                    (0, vitest_1.expect)(types).toContain("gtrgm");
                    (0, vitest_1.expect)(types).toContain("citext");
                    procs = [];
                    _d = 0, _e = r.extProcOids;
                    _f.label = 13;
                case 13:
                    if (!(_d < _e.length)) return [3 /*break*/, 16];
                    extProcOid = _e[_d];
                    return [4 /*yield*/, db.raw("select * from pg_catalog.pg_proc where oid = ".concat(extProcOid))];
                case 14:
                    c = _f.sent();
                    procs.push(c.rows[0].proname);
                    _f.label = 15;
                case 15:
                    _d++;
                    return [3 /*break*/, 13];
                case 16:
                    (0, vitest_1.expect)(procs).toContain("pg_stat_statements_info");
                    (0, vitest_1.expect)(procs).toContain("gtrgm_in");
                    (0, vitest_1.expect)(procs).toContain("citextin");
                    return [4 /*yield*/, db.raw("drop extension pg_trgm")];
                case 17:
                    _f.sent();
                    return [4 /*yield*/, db.raw("drop extension pg_stat_statements")];
                case 18:
                    _f.sent();
                    return [4 /*yield*/, db.raw("drop extension citext")];
                case 19:
                    _f.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
