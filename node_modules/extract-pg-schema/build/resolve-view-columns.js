"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var R = __importStar(require("ramda"));
var resolveViewColumns = function (views, tables, schemaName) {
    var everything = R.indexBy(R.prop('name'), __spreadArray(__spreadArray([], tables, true), views, true));
    return views.map(function (view) {
        var columns = view.columns.map(function (column) {
            var _a;
            var source = column.source;
            while (source) {
                if (source.schema && source.schema !== schemaName) {
                    console.error("Could not follow source of ".concat(schemaName, ".").concat(view.name, ".").concat(column.name, " because it references a different schema: ").concat(source.schema, "."));
                    source = undefined;
                }
                else {
                    var sourceColumn = everything[source.table].columns.find(function (col) { return col.name === source.column; });
                    if (!sourceColumn) {
                        throw new Error("Column ".concat((_a = source.schema) !== null && _a !== void 0 ? _a : schemaName, ".").concat(source.table, ".").concat(source.column, " was not found.."));
                    }
                    if (sourceColumn.source) {
                        source = sourceColumn.source;
                    }
                    else {
                        return __assign(__assign({}, column), { nullable: sourceColumn.nullable, reference: sourceColumn.reference, isPrimary: sourceColumn.isPrimary, indices: sourceColumn.indices });
                    }
                }
            }
            return column;
        });
        return __assign(__assign({}, view), { columns: columns });
    });
};
exports.default = resolveViewColumns;
